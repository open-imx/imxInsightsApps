name: Auto Release GUI on Lib Update

on:
  workflow_dispatch:
  repository_dispatch:

jobs:
  auto-release:
    if: github.event_name == 'workflow_dispatch' || github.event.action == 'trigger-auto-release'
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout GUI Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      
      # WE SHOULD ADD TESTS!

      - name: Setup GIT
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b version-bump-${{ github.sha }}

      - name: Bump version
        run: |
          hatch version dev

      - name: Push changes
        run: |
          git add .
          git status
          git push origin version-bump-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        run: |
          gh pr create --base main --head version-bump-${{ github.sha }} --title ":arrow_up: Version bump" --body "Automatic magic build version upgrade."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Pull Request
        run: |
          gh pr merge ${{ env.pr_url }} --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Branch
        run: |
          git push origin --delete version-bump-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          $version = python -c "import re; exec(open('imxInsightsApps/__init__.py').read()); print(__version__)"
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "::set-output name=version::$version"
        shell: pwsh

      - name: Get original PR details
        id: get_pr_details
        run: |
          $pr = gh pr view --json title,body --jq "{ title: .title, body: .body }" | ConvertFrom-Json
          echo "PR_TITLE=$($pr.title)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PR_BODY=$($pr.body)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install and build
        run: |
          pip install hatch pyinstaller
          hatch run python build-gui-app.py

      - name: Create GitHub Release
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174
        with:
          name: ðŸš€ Release ${{ steps.get_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.version }}
          body: |
            ***${{ env.PR_TITLE }}***
    
            ${{ env.PR_BODY }}
          draft: false
          artifacts: dist/imx-tools-gui-${{ steps.get_version.outputs.version }}-windows.zip
