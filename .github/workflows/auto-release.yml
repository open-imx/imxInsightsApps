name: Auto Release GUI on Lib Update

on:
  workflow_dispatch:
  repository_dispatch:

jobs:
  auto-release:
    if: github.event_name == 'workflow_dispatch' || github.event.action == 'trigger-auto-release'
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout GUI Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      
      # WE SHOULD ADD TESTS!

      - name: Setup GIT
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b version-bump-${{ github.sha }}

      - name: Bump version
        run: |
          hatch version dev

      - name: Push changes
        run: |
          git add .
          git status
          git push origin version-bump-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        run: |
          gh pr create --base main --head version-bump-${{ github.sha }} --title ":arrow_up: Version bump" --body "Automatic magic build version upgrade."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Pull Request
        run: |
          gh pr merge ${{ env.pr_url }} --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Branch
        run: |
          git push origin --delete version-bump-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          version=$(python -c 'import re; exec(open("imxInsightsApps/__init__.py").read()); print(__version__)')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Get original PR details
        id: get_pr_details
        run: |
          pr_title=$(gh pr view ${{ github.event.pull_request.number }} --json title --jq '.title')
          pr_body=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq '.body')
          echo "PR_TITLE=$pr_title" >> $GITHUB_ENV
          echo "PR_BODY=$pr_body" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install and build
        run: |
          python -m pip install --upgrade pip
          pip install hatch pyinstaller
          hatch run python build-gui-app.py


      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          name: ðŸš€ Release ${{ steps.get_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.version }}
          body: |
            ***${{ env.PR_TITLE }}***
    
            ${{ env.PR_BODY }}
          draft: false
          artifacts: dist/imx-tools-gui-${{ steps.get_version.outputs.version }}-windows.zip
